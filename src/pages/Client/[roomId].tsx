import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import axios from 'axios';
import { Card, CardContent, CardMedia, Typography, Button, Grid, Link, FormControl, FormLabel, Input, Select, Container } from '@mui/material';
import 'tailwindcss/tailwind.css';
import styles from '@/styles/Home.module.css';
import Head from 'next/head';
import { useClient } from '@/context/ClientContext';
import { z } from 'zod';

const API_URL = 'http://localhost:7000';
const ROOMS_ENDPOINT = '/rooms';
const RESERVATIONS_ENDPOINT = '/reservation';

const ReservationSchema = z.object({
  firstName: z.string().nonempty('First name is required'),
  lastName: z.string().nonempty('Last name is required'),
  email: z.string().email('Invalid email address').nonempty('Email is required'),
  cin: z.string().nonempty('CIN is required'),
  checkinDate: z.string().nonempty('Check-in date is required'),
  checkoutDate: z.string().nonempty('Check-out date is required'),
});

export default function Room() {
  const router = useRouter();
  const { roomId } = router.query;
  const { submitReservationForm } = useClient();
  const [room, setRoom] = useState(null);
  const [availableRooms, setAvailableRooms] = useState(null);
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [email, setEmail] = useState('');
  const [cin, setCIN] = useState('');
  const [checkinDate, setCheckinDate] = useState('');
  const [checkoutDate, setCheckoutDate] = useState('');


  interface Reservation {
    ID_Rooms: string,
    Date_Debut: Date,
    Date_Fin: Date,
  }

  const resetForm = (event) => {
    event.preventDefault();
    setFirstName('');
    setLastName('');
    setEmail('');
    setCIN('');
    setCheckinDate('');
    setCheckoutDate('');
  };

  const handleReservation = async (event) => {
    event.preventDefault();
    try {
      ReservationSchema.parse({
        firstName,
        lastName,
        email,
        cin,
        checkinDate,
        checkoutDate,
      });
  
      const formData = {
        firstName,
        lastName,
        email,
        cin,
        checkinDate,
        checkoutDate,
      };
      
        await submitReservationForm(formData);
      // Optional: Show success message or redirect to a success page
    } catch (error) {
      console.log('error submit');
    }
  };
  


  useEffect(() => {
    if (roomId) {
      axios.get(`${API_URL}${ROOMS_ENDPOINT}/${roomId}`).then((res) => {
        setRoom(res.data);
      });
    }
  }, [roomId]);

  useEffect(() => {
    if (room) {
      const fetchAvailableRooms = async () => {
        try {
          const response = await axios.get(`${API_URL}${RESERVATIONS_ENDPOINT}`, {
            params: { type: room.Type },
          });
          const reservations = response.data;
          const reservedRoomIds = reservations.map((reservation) => reservation.ID_Rooms);
          const availableRooms = room.Max - reservedRoomIds.length;
          setAvailableRooms(availableRooms);
        } catch (error) {
          console.error('Error fetching available rooms:', error);
        }
      };

      fetchAvailableRooms();
    }
  }, [room]);


  return (
    <>
      <Head>
        <title>Reservation</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.jpg" />
      </Head>

            <section className={styles.banner} style={{ height: '600px' }}>
            <div
                style={{
                height: '600px',
                backgroundImage: `url(/images/bg_3.jpg)`,
                display: 'block',
                backgroundRepeat: 'no-repeat',
                backgroundSize: 'cover',
                }}
            >
                <div className={styles.bannerContent}>
                <h2><Link style={{ color: '#f5e4c3' }} href="/">Home</Link></h2>
                <h1>Room Details</h1>
                </div>
            </div>
            </section>


            <div className={styles.about}>
                <h2>HARBOR LIGHT'S Reservation</h2>
            </div>
            

            {room && (
        <>
        <Container>
          <Grid container spacing={0} className="bg-blue-50" sx={{ maxWidth: 2000, margin: '2% auto' }}>
            <Grid item xs={12} md={6}>
              <Card>
                <CardMedia sx={{ height: 450 }} image={`/images/Rooms/${room.Image}`} title={room.Name} />
              </Card>
           </Grid>

           <Card>
              <CardContent>
                <Typography gutterBottom variant="h5" component="div" className="text-blue-700">
                  {room.Name} - 
                  {availableRooms !== null && (
                    <span style={{ marginLeft: '0.5rem' }}>({availableRooms} Chambres Disponible)</span>
                  )}
                </Typography>
              
                <Typography variant="body2" color="text.secondary">
                  {room.Description}
                </Typography>
              
                <Typography variant="body1" color="text.primary">
                  <strong>Max:</strong> {room.Max} people
                </Typography>
              
                <Typography variant="body1" color="text.primary">
                  <strong>Size:</strong> {room.Size} sqm
                </Typography>
              
                <Typography variant="body1" color="text.primary">
                  <strong>Bed Number:</strong> {room.Bed_Number}
                </Typography>
              
                <Typography variant="body1" color="text.primary">
                  <strong>Price:</strong> ${room.Price} per night
                </Typography>
              
                <Typography variant="body1" color="text.primary">
                  <strong>View:</strong> {room.View}
                </Typography>
            </CardContent>
          </Card>

            
          </Grid>

          <div className={styles.about}>
            <h2>Reserve this room</h2>
          </div>

          <Grid item xs={12} md={6} style={{margin: '5% 0'}}>
            <form
              onSubmit={handleReservation}
              style={{
                padding: '40px',
                backgroundColor: '#f9f9f9',
                textAlign: 'center',
              }}
            >
              <div
                style={{
                  display: 'flex',
                  flexDirection: 'column',
                  alignItems: 'center',
                  gap: '25px',
                }}
              >
                <FormControl fullWidth>
                  <FormLabel htmlFor="first_name">First Name</FormLabel>
                  <Input
                    id="first_name"
                    type="text"
                    placeholder="First Name"
                    value={firstName}
                    onChange={(event) => setFirstName(event.target.value)}
                  />
                </FormControl>

                <FormControl fullWidth>
                  <FormLabel htmlFor="last_name">Last Name</FormLabel>
                  <Input
                    id="last_name"
                    type="text"
                    placeholder="Last Name"
                    value={lastName}
                    onChange={(event) => setLastName(event.target.value)}
                  />
                </FormControl>

                <FormControl fullWidth>
                  <FormLabel htmlFor="email">Email (Optional)</FormLabel>
                  <Input
                    id="email"
                    type="email"
                    placeholder="Email"
                    value={email}
                    onChange={(event) => setEmail(event.target.value)}
                  />
                </FormControl>

                <FormControl fullWidth>
                  <FormLabel htmlFor="cin">CIN</FormLabel>
                  <Input
                    id="cin"
                    type="text"
                    placeholder="CIN"
                    value={cin}
                    onChange={(event) => setCIN(event.target.value)}
                  />
                </FormControl>

                <div
                  style={{
                    display: 'flex',
                    justifyContent: 'center',
                    margin: '0 20px',
                    gap: '25px',
                  }}
                >
                  <FormControl fullWidth>
                    <FormLabel htmlFor="checkin_date">Check-in Date</FormLabel>
                    <Input
                      id="checkin_date"
                      type="date"
                      placeholder="Check-in date"
                      value={checkinDate}
                      onChange={(event) => setCheckinDate(event.target.value)}
                    />
                  </FormControl>

                  <FormControl fullWidth>
                    <FormLabel htmlFor="checkout_date">Check-out Date</FormLabel>
                    <Input
                      id="checkout_date"
                      type="date"
                      placeholder="Check-out date"
                      value={checkoutDate}
                      onChange={(event) => setCheckoutDate(event.target.value)}
                    />
                  </FormControl>
                </div>

                <Button
                  variant="contained"
                  color="primary"
                  type="submit"
                  sx={{
                    flex: '1 0 auto',
                    fontSize: '16px',
                    fontFamily: 'Nunito Sans, Arial, sans-serif',
                    position: 'relative',
                    letterSpacing: '4px',
                    color: '#f5e4c3',
                    textTransform: 'uppercase',
                  }}
                >
                  <div style={{ display: 'flex', flexDirection: 'column' }}>
                    <span style={{ fontSize: '16px' }}>
                      Reserve
                    </span>
                  </div>
                </Button>
                <Button
                  onClick={resetForm}
                  variant="contained"
                  color="primary"
                  sx={{
                    flex: '1 0 auto',
                    fontSize: '16px',
                    fontFamily: 'Nunito Sans, Arial, sans-serif',
                    position: 'relative',
                    letterSpacing: '4px',
                    color: '#f5e4c3',
                    textTransform: 'uppercase',
                  }}
                >
                  <div style={{ display: 'flex', flexDirection: 'column' }}>
                    <span style={{ fontSize: '16px' }}>
                      Reset
                    </span>
                  </div>
                </Button>
              </div>
            </form>
            </Grid>
          </Container>
        </>
      )}
    </>
  );
}