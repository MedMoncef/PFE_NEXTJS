import React, { useState, useEffect } from 'react';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { toast } from 'react-toastify';
import Button from '@mui/material/Button';
import TextField from '@mui/material/TextField';
import Grid from '@mui/material/Grid';
import Paper from '@mui/material/Paper';
import Typography from '@mui/material/Typography';
import { useAuth } from '@/context/AuthContext';
import { z } from 'zod';

const registerSchema = z.object({
  email: z.string().email('Invalid email address').nonempty('Email is required'),
  password: z.string().min(6, 'Password must be at least 6 characters').nonempty('Password is required'),
});

export default function Register() {
  const { register, isLoggedIn } = useAuth();
  const router = useRouter();
  const [title, setTitle] = useState('Welcome, please register!');
  const [nom, setNom] = useState(''); // Added state for 'nom'
  const [prenom, setPrenom] = useState(''); // Added state for 'prenom'
  const [dateN, setDateN] = useState(''); // Added state for 'dateN'
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [post, setPost] = useState(''); // Added state for 'post'
  const [errors, setErrors] = useState({ email: '', password: '' });

  const resetForm = (event) => {
    event.preventDefault();
    setEmail('');
    setPassword('');
    setErrors({ email: '', password: '' });
  };

  const handleRegister = (event) => {
    event.preventDefault();
    try {
      registerSchema.parse({ nom, prenom, dateN, email, password, post });
      register(email, password);
      // Optional: Show success message or redirect to a success page
      router.push('/login');
    } catch (error) {
      if (error instanceof z.ZodError) {
        const emailError = error.issues.find((issue) => issue.path[0] === 'email');
        const passwordError = error.issues.find((issue) => issue.path[0] === 'password');
        setErrors({
          email: emailError ? emailError.message : '',
          password: passwordError ? passwordError.message : '',
        });
      }
    }
  };

  useEffect(() => {
    if (isLoggedIn) {
      router.push('/');
    }
  }, [isLoggedIn, router]);

  return (
    <>
      <Head>
        <title>Login page</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Grid container justifyContent="center" alignItems="center" sx={{ height: '100vh' }}>
          <Grid item xs={12} sm={6} md={4}>
            <Paper elevation={6} sx={{ p: 4 }}>
              <Typography variant="h4" sx={{ mb: 2 }}>
                {title}
              </Typography>
              <form onSubmit={handleRegister}>
                <Grid container spacing={2}>
                <Grid item xs={12}>
                    <TextField
                      fullWidth
                      variant="outlined"
                      label="Nom"
                      name="nom"
                      type="text"
                      value={nom}
                      onChange={(event) => setNom(event.target.value)}
                      error={!!errors.email}
                      helperText={errors.email}
                    />
                  </Grid>
                  <Grid item xs={12}>
                    <TextField
                      fullWidth
                      variant="outlined"
                      label="PrÃ©nom"
                      name="prenom"
                      type="text"
                      value={prenom}
                      onChange={(event) => setPrenom(event.target.value)}
                      error={!!errors.email}
                      helperText={errors.email}
                    />
                  </Grid>
                  <Grid item xs={12}>
                    <Grid container spacing={1} alignItems="center">
                      <Grid item xs={3}>
                        <Typography align="right" color="grey">Date of Birth:</Typography>
                      </Grid>
                      <Grid item xs={9}>
                        <TextField
                          fullWidth
                          variant="outlined"
                          name="dateN"
                          type="date" // Consider changing the type to 'date' if appropriate
                          value={dateN}
                          onChange={(event) => setDateN(event.target.value)}
                          error={!!errors.email}
                          helperText={errors.email}
                        />
                      </Grid>
                    </Grid>
                  </Grid>
                  <Grid item xs={12}>
                    <TextField
                      fullWidth
                      variant="outlined"
                      label="Email Address"
                      name="email"
                      type="email"
                      value={email}
                      onChange={(event) => setEmail(event.target.value)}
                      error={!!errors.email}
                      helperText={errors.email}
                    />
                  </Grid>
                  <Grid item xs={12}>
                    <TextField
                      fullWidth
                      variant="outlined"
                      label="Password"
                      name="password"
                      type="password"
                      value={password}
                      onChange={(event) => setPassword(event.target.value)}
                      error={!!errors.password}
                      helperText={errors.password}
                    />
                  </Grid>
                  <Grid item xs={12}>
                    <TextField
                      fullWidth
                      variant="outlined"
                      label="Post"
                      name="post"
                      type="text"
                      value={post}
                      onChange={(event) => setPost(event.target.value)}
                      error={!!errors.email}
                      helperText={errors.email}
                    />
                  </Grid>
                  <Grid item xs={12}>
                  <Button fullWidth variant="contained" color="primary" type="submit">
                    Register
                  </Button>
                  </Grid>
                  <Grid item xs={12}>
                    <Button fullWidth variant="outlined" onClick={resetForm}>
                      Reset
                    </Button>
                  </Grid>
                </Grid>
              </form>
            </Paper>
          </Grid>
        </Grid>
      </main>
    </>
  );
}